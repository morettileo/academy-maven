/*
 * Afea Device Manager API
 * Afea Device Manager API
 *
 * OpenAPI spec version: 1.5.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package eu.afea.academy.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * Printer
 */
@ApiModel(description = "Printer")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-07-01T15:40:07.215+02:00")
public class PrinterDTO {
  @JsonProperty("id")
  private String id = null;

  /**
   * Tipo stampante
   */
  public enum PrinterTypeEnum {
    GENERAL_PURPOSE("GENERAL_PURPOSE"),
    
    ZEBRA("ZEBRA");

    private String value;

    PrinterTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PrinterTypeEnum fromValue(String text) {
      for (PrinterTypeEnum b : PrinterTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("printerType")
  private PrinterTypeEnum printerType = null;

  @JsonProperty("local")
  private Boolean local = null;

  /**
   * Stato della stampante
   */
  public enum PrinterStateEnum {
    IDLE("IDLE"),
    
    BUSY("BUSY"),
    
    OFFLINE("OFFLINE"),
    
    OUT_OF_PAPER("OUT_OF_PAPER"),
    
    FAULT("FAULT");

    private String value;

    PrinterStateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PrinterStateEnum fromValue(String text) {
      for (PrinterStateEnum b : PrinterStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("printerState")
  private PrinterStateEnum printerState = null;

  @JsonProperty("paperSizes")
  private List<String> paperSizes = null;

  @JsonProperty("paperSources")
  private List<String> paperSources = null;

  @JsonProperty("duplexSupported")
  private Boolean duplexSupported = null;

  @JsonProperty("default")
  private Boolean _default = null;

  public PrinterDTO id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Id stampante
   * @return id
  **/
  @ApiModelProperty(required = true, value = "Id stampante")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public PrinterDTO printerType(PrinterTypeEnum printerType) {
    this.printerType = printerType;
    return this;
  }

   /**
   * Tipo stampante
   * @return printerType
  **/
  @ApiModelProperty(required = true, value = "Tipo stampante")
  public PrinterTypeEnum getPrinterType() {
    return printerType;
  }

  public void setPrinterType(PrinterTypeEnum printerType) {
    this.printerType = printerType;
  }

  public PrinterDTO local(Boolean local) {
    this.local = local;
    return this;
  }

   /**
   * Indica se il dispositivo di stampa è locale o di rete
   * @return local
  **/
  @ApiModelProperty(required = true, value = "Indica se il dispositivo di stampa è locale o di rete")
  public Boolean isLocal() {
    return local;
  }

  public void setLocal(Boolean local) {
    this.local = local;
  }

   /**
   * Stato della stampante
   * @return printerState
  **/
  @ApiModelProperty(value = "Stato della stampante")
  public PrinterStateEnum getPrinterState() {
    return printerState;
  }

   /**
   * Elenco dei formati pagina associati alla stampante
   * @return paperSizes
  **/
  @ApiModelProperty(value = "Elenco dei formati pagina associati alla stampante")
  public List<String> getPaperSizes() {
    return paperSizes;
  }

   /**
   * Elenco delle sorgenti carta/cassetti alla stampante
   * @return paperSources
  **/
  @ApiModelProperty(value = "Elenco delle sorgenti carta/cassetti alla stampante")
  public List<String> getPaperSources() {
    return paperSources;
  }

   /**
   * Indica se la stampante supporta il fronte/retro
   * @return duplexSupported
  **/
  @ApiModelProperty(value = "Indica se la stampante supporta il fronte/retro")
  public Boolean isDuplexSupported() {
    return duplexSupported;
  }

   /**
   * Indica se la stampante è quella di default
   * @return _default
  **/
  @ApiModelProperty(value = "Indica se la stampante è quella di default")
  public Boolean isDefault() {
    return _default;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrinterDTO printer = (PrinterDTO) o;
    return Objects.equals(this.id, printer.id) &&
        Objects.equals(this.printerType, printer.printerType) &&
        Objects.equals(this.local, printer.local) &&
        Objects.equals(this.printerState, printer.printerState) &&
        Objects.equals(this.paperSizes, printer.paperSizes) &&
        Objects.equals(this.paperSources, printer.paperSources) &&
        Objects.equals(this.duplexSupported, printer.duplexSupported) &&
        Objects.equals(this._default, printer._default);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, printerType, local, printerState, paperSizes, paperSources, duplexSupported, _default);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrinterDTO {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    printerType: ").append(toIndentedString(printerType)).append("\n");
    sb.append("    local: ").append(toIndentedString(local)).append("\n");
    sb.append("    printerState: ").append(toIndentedString(printerState)).append("\n");
    sb.append("    paperSizes: ").append(toIndentedString(paperSizes)).append("\n");
    sb.append("    paperSources: ").append(toIndentedString(paperSources)).append("\n");
    sb.append("    duplexSupported: ").append(toIndentedString(duplexSupported)).append("\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

