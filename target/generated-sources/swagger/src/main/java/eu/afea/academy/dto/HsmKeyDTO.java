/*
 * Afea Device Manager API
 * Afea Device Manager API
 *
 * OpenAPI spec version: 1.5.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package eu.afea.academy.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * HSM Key Alias
 */
@ApiModel(description = "HSM Key Alias")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-07-01T15:40:07.215+02:00")
public class HsmKeyDTO {
  @JsonProperty("alias")
  private String alias = null;

  @JsonProperty("algorithm")
  private String algorithm = null;

  @JsonProperty("format")
  private String format = null;

  /**
   * Indica le modalità di autenticazione per la chiave
   */
  public enum AuthenticationTypeEnum {
    LOCAL("LOCAL"),
    
    PIN("PIN"),
    
    PASSWORD("PASSWORD"),
    
    USERNAME_AND_PASSWORD("USERNAME_AND_PASSWORD");

    private String value;

    AuthenticationTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AuthenticationTypeEnum fromValue(String text) {
      for (AuthenticationTypeEnum b : AuthenticationTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("authenticationType")
  private AuthenticationTypeEnum authenticationType = null;

  @JsonProperty("signerId")
  private String signerId = null;

   /**
   * Alias delle chiavi del dispositivo utilizzabili per la firma
   * @return alias
  **/
  @ApiModelProperty(value = "Alias delle chiavi del dispositivo utilizzabili per la firma")
  public String getAlias() {
    return alias;
  }

   /**
   * Algoritmo utilizzato dalla chiave
   * @return algorithm
  **/
  @ApiModelProperty(value = "Algoritmo utilizzato dalla chiave")
  public String getAlgorithm() {
    return algorithm;
  }

   /**
   * Formato di codifica primaria della chiave
   * @return format
  **/
  @ApiModelProperty(value = "Formato di codifica primaria della chiave")
  public String getFormat() {
    return format;
  }

   /**
   * Indica le modalità di autenticazione per la chiave
   * @return authenticationType
  **/
  @ApiModelProperty(value = "Indica le modalità di autenticazione per la chiave")
  public AuthenticationTypeEnum getAuthenticationType() {
    return authenticationType;
  }

   /**
   * Identificativo del firmatario
   * @return signerId
  **/
  @ApiModelProperty(value = "Identificativo del firmatario")
  public String getSignerId() {
    return signerId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HsmKeyDTO hsmKey = (HsmKeyDTO) o;
    return Objects.equals(this.alias, hsmKey.alias) &&
        Objects.equals(this.algorithm, hsmKey.algorithm) &&
        Objects.equals(this.format, hsmKey.format) &&
        Objects.equals(this.authenticationType, hsmKey.authenticationType) &&
        Objects.equals(this.signerId, hsmKey.signerId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alias, algorithm, format, authenticationType, signerId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HsmKeyDTO {\n");
    
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("    algorithm: ").append(toIndentedString(algorithm)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    authenticationType: ").append(toIndentedString(authenticationType)).append("\n");
    sb.append("    signerId: ").append(toIndentedString(signerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

