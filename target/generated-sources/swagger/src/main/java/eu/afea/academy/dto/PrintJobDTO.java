/*
 * Afea Device Manager API
 * Afea Device Manager API
 *
 * OpenAPI spec version: 1.5.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package eu.afea.academy.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import eu.afea.academy.dto.PrintOptionsDTO;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.Date;

/**
 * Print Job
 */
@ApiModel(description = "Print Job")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-07-01T15:40:07.215+02:00")
public class PrintJobDTO {
  @JsonProperty("bundleId")
  private String bundleId = null;

  @JsonProperty("operationId")
  private String operationId = null;

  @JsonProperty("documentId")
  private String documentId = null;

  @JsonProperty("printProgress")
  private Long printProgress = null;

  @JsonProperty("processingDetails")
  private String processingDetails = null;

  @JsonProperty("submitDate")
  private Date submitDate = null;

  @JsonProperty("processingDate")
  private Date processingDate = null;

  /**
   * stato della stampa
   */
  public enum ProcessingStateEnum {
    IDLE("IDLE"),
    
    PENDING("PENDING"),
    
    WORKING("WORKING"),
    
    PAUSED("PAUSED"),
    
    COMPLETED("COMPLETED"),
    
    ERROR("ERROR");

    private String value;

    ProcessingStateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ProcessingStateEnum fromValue(String text) {
      for (ProcessingStateEnum b : ProcessingStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("processingState")
  private ProcessingStateEnum processingState = null;

  @JsonProperty("printOptions")
  private PrintOptionsDTO printOptions = null;

  public PrintJobDTO bundleId(String bundleId) {
    this.bundleId = bundleId;
    return this;
  }

   /**
   * id del bundle
   * @return bundleId
  **/
  @ApiModelProperty(required = true, value = "id del bundle")
  public String getBundleId() {
    return bundleId;
  }

  public void setBundleId(String bundleId) {
    this.bundleId = bundleId;
  }

  public PrintJobDTO operationId(String operationId) {
    this.operationId = operationId;
    return this;
  }

   /**
   * id dell&#39;operazione
   * @return operationId
  **/
  @ApiModelProperty(required = true, value = "id dell'operazione")
  public String getOperationId() {
    return operationId;
  }

  public void setOperationId(String operationId) {
    this.operationId = operationId;
  }

  public PrintJobDTO documentId(String documentId) {
    this.documentId = documentId;
    return this;
  }

   /**
   * id del documento
   * @return documentId
  **/
  @ApiModelProperty(required = true, value = "id del documento")
  public String getDocumentId() {
    return documentId;
  }

  public void setDocumentId(String documentId) {
    this.documentId = documentId;
  }

  public PrintJobDTO printProgress(Long printProgress) {
    this.printProgress = printProgress;
    return this;
  }

   /**
   * progresso di stampa
   * @return printProgress
  **/
  @ApiModelProperty(value = "progresso di stampa")
  public Long getPrintProgress() {
    return printProgress;
  }

  public void setPrintProgress(Long printProgress) {
    this.printProgress = printProgress;
  }

  public PrintJobDTO processingDetails(String processingDetails) {
    this.processingDetails = processingDetails;
    return this;
  }

   /**
   * dettagli sul processamento
   * @return processingDetails
  **/
  @ApiModelProperty(value = "dettagli sul processamento")
  public String getProcessingDetails() {
    return processingDetails;
  }

  public void setProcessingDetails(String processingDetails) {
    this.processingDetails = processingDetails;
  }

  public PrintJobDTO submitDate(Date submitDate) {
    this.submitDate = submitDate;
    return this;
  }

   /**
   * istante di inoltro alla stampante
   * @return submitDate
  **/
  @ApiModelProperty(value = "istante di inoltro alla stampante")
  public Date getSubmitDate() {
    return submitDate;
  }

  public void setSubmitDate(Date submitDate) {
    this.submitDate = submitDate;
  }

  public PrintJobDTO processingDate(Date processingDate) {
    this.processingDate = processingDate;
    return this;
  }

   /**
   * istante di processamento della stampa
   * @return processingDate
  **/
  @ApiModelProperty(value = "istante di processamento della stampa")
  public Date getProcessingDate() {
    return processingDate;
  }

  public void setProcessingDate(Date processingDate) {
    this.processingDate = processingDate;
  }

  public PrintJobDTO processingState(ProcessingStateEnum processingState) {
    this.processingState = processingState;
    return this;
  }

   /**
   * stato della stampa
   * @return processingState
  **/
  @ApiModelProperty(value = "stato della stampa")
  public ProcessingStateEnum getProcessingState() {
    return processingState;
  }

  public void setProcessingState(ProcessingStateEnum processingState) {
    this.processingState = processingState;
  }

  public PrintJobDTO printOptions(PrintOptionsDTO printOptions) {
    this.printOptions = printOptions;
    return this;
  }

   /**
   * opzioni della stampa
   * @return printOptions
  **/
  @ApiModelProperty(value = "opzioni della stampa")
  public PrintOptionsDTO getPrintOptions() {
    return printOptions;
  }

  public void setPrintOptions(PrintOptionsDTO printOptions) {
    this.printOptions = printOptions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrintJobDTO printJob = (PrintJobDTO) o;
    return Objects.equals(this.bundleId, printJob.bundleId) &&
        Objects.equals(this.operationId, printJob.operationId) &&
        Objects.equals(this.documentId, printJob.documentId) &&
        Objects.equals(this.printProgress, printJob.printProgress) &&
        Objects.equals(this.processingDetails, printJob.processingDetails) &&
        Objects.equals(this.submitDate, printJob.submitDate) &&
        Objects.equals(this.processingDate, printJob.processingDate) &&
        Objects.equals(this.processingState, printJob.processingState) &&
        Objects.equals(this.printOptions, printJob.printOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bundleId, operationId, documentId, printProgress, processingDetails, submitDate, processingDate, processingState, printOptions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrintJobDTO {\n");
    
    sb.append("    bundleId: ").append(toIndentedString(bundleId)).append("\n");
    sb.append("    operationId: ").append(toIndentedString(operationId)).append("\n");
    sb.append("    documentId: ").append(toIndentedString(documentId)).append("\n");
    sb.append("    printProgress: ").append(toIndentedString(printProgress)).append("\n");
    sb.append("    processingDetails: ").append(toIndentedString(processingDetails)).append("\n");
    sb.append("    submitDate: ").append(toIndentedString(submitDate)).append("\n");
    sb.append("    processingDate: ").append(toIndentedString(processingDate)).append("\n");
    sb.append("    processingState: ").append(toIndentedString(processingState)).append("\n");
    sb.append("    printOptions: ").append(toIndentedString(printOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

