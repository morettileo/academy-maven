/*
 * Afea Device Manager API
 * Afea Device Manager API
 *
 * OpenAPI spec version: 1.5.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package eu.afea.academy.dto;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.Date;

/**
 * Documento
 */
@ApiModel(description = "Documento")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-07-01T15:40:07.215+02:00")
public class DocumentDTO {
  @JsonProperty("id")
  private String id = null;

  @JsonProperty("documentClientId")
  private String documentClientId = null;

  /**
   * tipo di documento / tipo di contenuto del documento
   */
  public enum DocumentTypeEnum {
    PDF("PDF"),
    
    RAW("RAW"),
    
    URI("URI");

    private String value;

    DocumentTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DocumentTypeEnum fromValue(String text) {
      for (DocumentTypeEnum b : DocumentTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("documentType")
  private DocumentTypeEnum documentType = null;

  @JsonProperty("content")
  private String content = null;

  /**
   * stato del documento
   */
  public enum ProcessingStateEnum {
    IDLE("IDLE"),
    
    PENDING("PENDING"),
    
    WORKING("WORKING"),
    
    PAUSED("PAUSED"),
    
    COMPLETED("COMPLETED"),
    
    ERROR("ERROR");

    private String value;

    ProcessingStateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ProcessingStateEnum fromValue(String text) {
      for (ProcessingStateEnum b : ProcessingStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("processingState")
  private ProcessingStateEnum processingState = null;

  @JsonProperty("creationTime")
  private Date creationTime = null;

  @JsonProperty("lastActivityTime")
  private Date lastActivityTime = null;

   /**
   * id del documento
   * @return id
  **/
  @ApiModelProperty(value = "id del documento")
  public String getId() {
    return id;
  }

  public DocumentDTO documentClientId(String documentClientId) {
    this.documentClientId = documentClientId;
    return this;
  }

   /**
   * id del documento assegnato dal client
   * @return documentClientId
  **/
  @ApiModelProperty(value = "id del documento assegnato dal client")
  public String getDocumentClientId() {
    return documentClientId;
  }

  public void setDocumentClientId(String documentClientId) {
    this.documentClientId = documentClientId;
  }

  public DocumentDTO documentType(DocumentTypeEnum documentType) {
    this.documentType = documentType;
    return this;
  }

   /**
   * tipo di documento / tipo di contenuto del documento
   * @return documentType
  **/
  @ApiModelProperty(required = true, value = "tipo di documento / tipo di contenuto del documento")
  public DocumentTypeEnum getDocumentType() {
    return documentType;
  }

  public void setDocumentType(DocumentTypeEnum documentType) {
    this.documentType = documentType;
  }

  public DocumentDTO content(String content) {
    this.content = content;
    return this;
  }

   /**
   * contenuto del documento. Se documentType vale &#39;URI&#39;, contiene la URI attraverso la quale è possibile accedere al documento. Altrimenti contiene il contenuto del documento in formato Base64
   * @return content
  **/
  @ApiModelProperty(required = true, value = "contenuto del documento. Se documentType vale 'URI', contiene la URI attraverso la quale è possibile accedere al documento. Altrimenti contiene il contenuto del documento in formato Base64")
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }

   /**
   * stato del documento
   * @return processingState
  **/
  @ApiModelProperty(value = "stato del documento")
  public ProcessingStateEnum getProcessingState() {
    return processingState;
  }

   /**
   * istante di creazione del documento
   * @return creationTime
  **/
  @ApiModelProperty(value = "istante di creazione del documento")
  public Date getCreationTime() {
    return creationTime;
  }

   /**
   * istante dell&#39;ultimo utilizzo del documento
   * @return lastActivityTime
  **/
  @ApiModelProperty(value = "istante dell'ultimo utilizzo del documento")
  public Date getLastActivityTime() {
    return lastActivityTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentDTO document = (DocumentDTO) o;
    return Objects.equals(this.id, document.id) &&
        Objects.equals(this.documentClientId, document.documentClientId) &&
        Objects.equals(this.documentType, document.documentType) &&
        Objects.equals(this.content, document.content) &&
        Objects.equals(this.processingState, document.processingState) &&
        Objects.equals(this.creationTime, document.creationTime) &&
        Objects.equals(this.lastActivityTime, document.lastActivityTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, documentClientId, documentType, content, processingState, creationTime, lastActivityTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentDTO {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    documentClientId: ").append(toIndentedString(documentClientId)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    processingState: ").append(toIndentedString(processingState)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    lastActivityTime: ").append(toIndentedString(lastActivityTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

